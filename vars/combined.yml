---
# Note for Ansible variables with '-'s we have substituted '_' or we get an Ansible error with loops

# Settings for ethernet interfaces.
ethernet_interfaces:
  - name: ether2
    poe-out: "off"
  - name: ether3
    poe-out: "off"
  - name: ether4
    poe-out: "off"
  - name: ether5
    poe-out: "off"
    ip_settings:
    #  static: ...
    #   dhcp_client:
    #     comment: "Ether5 DHCP Client"
  # - { name: sfp1, auto-negotiation: "no", speed: 1G-baseT-full  }

# Mikrotik bridge is a vlan capable switch
# It is not a Linux style bridge, which is a dumb switch
bridge:
  # Default configuration
  - name: "bridgeLocal"
    comment: "defcon Physical Management interface"
    admin-mac: "{{ def_switch_mac }}"
    auto-mac: "no"
    ip_settings:
      dhcp_client:
        comment: "Defconf"
    interfaces:
      # Left ether5 on the default bridge during configuration.
      - { interface: ether5 }
      - { interface: sfp1 }
    interface_vlans: []
  # New bridge for our setup
  - name: "bridge1"
    admin-mac: "{{ br1_switch_mac }}"
    auto-mac: "no"
    comment: "switch"
    interfaces:
      - { interface: ether1, hw: "yes" }
      - { interface: ether2, hw: "yes" }
      - { interface: ether3, hw: "yes" }
      - { interface: ether4, hw: "yes" }
      # - { interface: ether5, hw: "yes" }
    interface_vlans:
      - name: vlan1
        vlan-ids: "1"
        comment: "Default LAN vlan"
        mtu: 1500
        untagged: "ether1,ether2,ether3,switch1-cpu"
        ip_settings:
          static:
            ip: &lan_ip "{{ lan_ip }}"
            network: "{{ lan_network }}"
            mask_bits: "{{ lan_mask_bits }}"
            gateway: &lan_gw "{{ lan_gw }}"
        dhcp_server:
          comment: "LAN"
          range: "{{ lan_dhcp_range }}"
          dns_server: *lan_ip
          gateway: *lan_ip
      - name: vlan10
        vlan-ids: "10"
        comment: "ISP WAN vlan"
        tagged: "ether4,switch1-cpu"
        ip_settings:
          dhcp_client:
      - name: vlan88
        vlan-ids: "88"
        comment: "Management vlan"
        mtu: 1500
        tagged: "ether1,ether2,ether3,switch1-cpu"
        ip_settings:
          static:
            ip: &mgmt_ip "{{ mgmt_ip }}"
            network: "{{ mgmt_network }}"
            mask_bits: "{{ mgmt_mask_bits }}"
        # dhcp_server:
        #   range: "{{ mgmt_dhcp_range }}"
        #   dns_server: *mgmt_ip

# Repeat bridge settings for switch (look at merging with brige.interface_vlans)
# Setting for the hardware based switch in our router
switch:
  # LAN ports are untagged vlan 1
  - { default-vlan-id: "1", port: "ether1", vlan-mode: "fallback", vlan-header: "leave-as-is" }
  - { default-vlan-id: "1", port: "ether2", vlan-mode: "fallback", vlan-header: "leave-as-is" }
  - { default-vlan-id: "1", port: "ether3", vlan-mode: "fallback", vlan-header: "leave-as-is" }
  # WAN ports are tagged vlan 10
  - { default-vlan-id: "10", port: "ether4", vlan-mode: "secure", vlan-header: "leave-as-is" }
  # Don't break management access
  - { port: "ether5", vlan-mode: "fallback", vlan-header: "leave-as-is" }
  - { port: "switch1-cpu", vlan-mode: "fallback", vlan-header: "leave-as-is" }

routes:
# Routes to stop private network IPs trying to route to world
- { dst-address: "10.0.0.0/8", gateway: *lan_gw }
- { dst-address: "172.16.0.0/12", gateway: *lan_gw }
- { dst-address: "169.254.0.0/16", gateway: *lan_gw }
- { dst-address: "100.64.0.0/22", gateway: *lan_gw }

discovery_protocol:
  - discover-interface-list: LAN
    protocol: "lldp"

services:
 - { name: "telnet", disabled: "yes" }
 - { name: "ftp", disabled: "yes" }
 - { name: "winbox", disabled: "yes" }

snmp:
  config:
    - enabled: "yes"
      contact: "Rob Burrowes, rob@wikarekare.org"
      location: "OceanView Cabinet"
  community:
    - { name: "public", read-access: "no", write-access: "no" }
    - { name: "wikk_ovc_ro", read-access: "yes", write-access: "no", addresses: "{{ lan_network }}/{{ lan_mask_bits }}" }

ssh:
  host_ca:
    - host-key-type: ed25519
      strong-crypto: "yes"

timezone: Pacific/Auckland

# Interfaces can be grouped by name for use in some config items
interface_list:
  - name: MGMT
    comment: 'Management interfaces'
    interfaces:
      - name: bridgeLocal
      - name: vlan88
    #
  - name: LAN
    comment: LAN
    interfaces:
      - name: vlan1
  #
  - name: WAN
    comment: ISP
    interfaces:
      - name: vlan10

firewall_rules:
  # input chain
  - { action: accept, chain: input, comment: "accept established,related,untracked", connection-state: "established,related,untracked" }
  - { action: drop, chain: input, comment: "drop invalid", connection-state: "invalid" }
  - { action: accept, chain: input, comment: "accept ICMP", protocol: icmp }
  - { action: accept, chain: input, comment: "accept to local loopback (for CAPsMAN)", dst-address: "127.0.0.1" }
  - { action: accept, chain: input, comment: "Allow Management Port", in-interface-list: "MGMT" }
  - { action: drop, chain: input, comment: "drop all not coming from LAN", in-interface-list: "!LAN" }
  # Forward chain
  - { action: accept, chain: forward, comment: "accept in ipsec policy", ipsec-policy: "in,ipsec" }
  - { action: accept, chain: forward, comment: "accept out ipsec policy", ipsec-policy: "out,ipsec" }
  # the following rule get duplicated every run
  - { action: "fasttrack-connection", chain: forward, comment: "fasttrack", connection-state: "established,related", hw-offload: "yes"}
  - { action: accept, chain: forward, comment: "accept established,related,untracked", connection-state: "established,related,untracked" }
  - { action: drop, chain: forward, comment: "drop invalid", connection-state: "invalid" }
  - { action: drop, chain: forward, comment: "drop all from WAN not DSTNATed", connection-nat-state: "!dstnat", connection-state: "new", in-interface-list: "WAN" }

nat_rules:
  - { action: masquerade, chain: srcnat, comment: "masquerade", ipsec-policy: "out,none", out-interface-list: "WAN" }
  - { action: dst-nat, chain: dstnat, in-interface-list: "WAN", comment: http, protocol: tcp, src-port: 80, to-addresses: "{{webserver}}", to-ports: 80 }
  - { action: dst-nat, chain: dstnat, in-interface-list: "WAN", comment: http, protocol: tcp, src-port: 443, to-addresses: "{{webserver}}", to-ports: 443 }
